"use strict";(self.webpackChunksoftpack_docs=self.webpackChunksoftpack_docs||[]).push([[656],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9163:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:5},o="Testing Strategy",s={unversionedId:"overview/testing_strategy",id:"overview/testing_strategy",title:"Testing Strategy",description:"This documentation is under development and may be incomplete.",source:"@site/docs/overview/testing_strategy.md",sourceDirName:"overview",slug:"/overview/testing_strategy",permalink:"/softpack-docs/docs/overview/testing_strategy",draft:!1,tags:[],version:"current",lastUpdatedAt:1693295905,formattedLastUpdatedAt:"Aug 29, 2023",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docs",previous:{title:"System Architecture",permalink:"/softpack-docs/docs/overview/architecture"},next:{title:"Deployment",permalink:"/softpack-docs/docs/overview/deployment"}},l={},c=[{value:"Unit Testing",id:"unit-testing",level:2},{value:"GitHub CI/CD workflows",id:"github-cicd-workflows",level:3},{value:"Component-level Testing",id:"component-level-testing",level:2},{value:"Integration Testing",id:"integration-testing",level:2},{value:"System Testing",id:"system-testing",level:2},{value:"Acceptance Testing",id:"acceptance-testing",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"testing-strategy"},"Testing Strategy"),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"This documentation is under development and may be incomplete.")),(0,a.kt)("p",null,"A comprehensive testing strategy generally involves the following five stages:"),(0,a.kt)("mermaid",{value:"graph BT\n    unit(Unit Testing)\n    component(Component Testing)\n    integration(Integration Testing)\n    system(System Testing)\n    acceptance(Acceptance Testing)\n\n    unit --\x3e component\n    component --\x3e integration\n    integration --\x3e system\n    system --\x3e acceptance"}),(0,a.kt)("h2",{id:"unit-testing"},"Unit Testing"),(0,a.kt)("p",null,"Unit testing attempts to test the smallest units of code within each component.\nIn general, unit testing is performed at the interface, class or file level\nwhere each source file includes a separate test counterpart responsible for\ntesting its functionality. Most, if not all unit testing should be performed\nautomatically and should be integrated in the Continuous Integration workflows. "),(0,a.kt)("h3",{id:"github-cicd-workflows"},"GitHub CI/CD workflows"),(0,a.kt)("p",null,"The following table summarizes GitHub workflows that are part of CI/CD and the\ncoverage they provide."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Workflow"),(0,a.kt)("th",{parentName:"tr",align:null},"Branch/Tag"),(0,a.kt)("th",{parentName:"tr",align:null},"Coverage"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Dev"),(0,a.kt)("td",{parentName:"tr",align:null},"branch: main"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Preview"),(0,a.kt)("td",{parentName:"tr",align:null},"branch: main"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Release"),(0,a.kt)("td",{parentName:"tr",align:null},"tag: v*"),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("h2",{id:"component-level-testing"},"Component-level Testing"),(0,a.kt)("p",null,"Each component implements its own test suite and defines a set of tests that\nmust pass before integration testing."),(0,a.kt)("p",null,"Refer to the ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/test_plan"},"Test Plan")," for details about\ntesting requirements for each component."),(0,a.kt)("h2",{id:"integration-testing"},"Integration Testing"),(0,a.kt)("p",null,"When two or more components are integrated, a suite of tests that defines the\ninteraction between the components must be run before integration is completed."),(0,a.kt)("p",null,"Refer to the ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/test_plan"},"Test Plan")," for details about\nrequirements for the integration testing phase."),(0,a.kt)("h2",{id:"system-testing"},"System Testing"),(0,a.kt)("p",null,"System tests are carried out on an integrated system to ensure the system as a\nwhole performs as expected. "),(0,a.kt)("p",null,"Refer to the ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/test_plan"},"Test Plan")," for details about\nsystem testing requirements."),(0,a.kt)("h2",{id:"acceptance-testing"},"Acceptance Testing"),(0,a.kt)("p",null,"Acceptance testing is performed to ensure the product meets the specified\nrequirements and the intended feature sets."),(0,a.kt)("p",null,"Refer to the ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/test_plan"},"Test Plan")," for details about\nrequirements for acceptance testing."))}m.isMDXComponent=!0}}]);